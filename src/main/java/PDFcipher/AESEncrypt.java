/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package PDFcipher;

import java.nio.file.Files;
import java.nio.file.Paths;

import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.InvalidKeyException;

import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;


public class AESEncrypt {

    public static void startEncrypt(String PDFfileDirectory, String outputCipherDirectory, String keyDirectory) {
      //Initializing a Cipher Text
      CipherOutputStream cipherText = null;
      FileOutputStream fos = null;
      FileInputStream data = null;
      //AES key
      Key AESkey = null;

      //get data from input File
      try{ data = new FileInputStream(PDFfileDirectory); }
      catch(FileNotFoundException ex) { System.out.println(ex.getMessage()); }
      //put cipher data to File
      try{ fos = new java.io.FileOutputStream(outputCipherDirectory); }
      catch(IOException ex) { System.out.println(ex.getMessage()); }

      //get AES key from decrypted fileDirectory
      try{ AESkey = readFile(keyDirectory); }
      catch(IOException ex) { System.out.println(ex.getMessage()); }

      //encrypting the Data
      try{ cipherText = encryptCall(AESkey, data, fos); }
      catch(IOException ex) { System.out.println(ex.getMessage()); }

      try{ writeEncrypt(data, cipherText); }
      catch(IOException ex) { System.out.println(ex.getMessage()); }

      try{
        fos.close();
        data.close();
        cipherText.close();
      }
      catch(IOException ex) {
        System.out.println(ex.getMessage());
      }

      System.out.println("AES done");
    }

    private static CipherOutputStream encryptCall(Key pair, FileInputStream data, FileOutputStream fos) throws IOException{

      Cipher cipher = null;
      try{//Creating a Cipher object
        cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
      }
      catch(NoSuchPaddingException | NoSuchAlgorithmException ex) {
        System.out.println(ex.getMessage());
      }
      //Initializing a Cipher object
      try{ cipher.init(Cipher.ENCRYPT_MODE, pair); }
      catch(InvalidKeyException ex) { System.out.println(ex.getMessage()); }
      return (new CipherOutputStream(fos, cipher));
    }

    private static void writeEncrypt(FileInputStream data, CipherOutputStream cipherText) throws IOException{
      int i;
      byte[] block = new byte[256];
      while ((i = data.read(block)) != -1) {
        cipherText.write(block, 0, i);
      }
      try{
        data.close();
        cipherText.close();
      }
      catch(IOException ex) {
        System.out.println(ex.getMessage());
      }
    }

    private static Key readFile(String path) throws IOException {
      byte[] encodedKey = null;
      Key key = null;

      try{ encodedKey = readFileString(path); }
      catch(IOException ex) { System.out.println(ex.getMessage()); }

      return (new SecretKeySpec(encodedKey,0,encodedKey.length, "AES"));
    }

    private static byte[] readFileString(String path) throws IOException {
      return Files.readAllBytes(Paths.get(path));
    }

}
